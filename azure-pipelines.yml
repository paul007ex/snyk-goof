trigger:
- main

pool:
  vmImage: 'ubuntu-latest'

variables:
  - group: KeyVaultSecrets # Variable group linked to Azure Key Vault

# Steps to retrieve secrets from Azure Key Vault
steps:
- task: AzureKeyVault@2
  inputs:
    azureSubscription: 'YourAzureServiceConnection'
    KeyVaultName: 'YourKeyVaultName'
    SecretsFilter: '*'
    RunAsPreJob: true

# Step to install .NET Core SDK if applicable
- task: UseDotNet@2
  inputs:
    packageType: 'sdk'
    version: '5.x'
    installationPath: $(Agent.ToolsDirectory)/dotnet

# Step to build the project
- script: dotnet build
  displayName: 'Build Project'

# SonarCloud Analysis (SAST)
- task: SonarCloudPrepare@1
  inputs:
    SonarCloud: 'SonarCloudConnection'
    organization: 'your-org'
    scannerMode: 'MSBuild'
    projectKey: 'your-project-key'
    projectName: 'YourProjectName'
    extraProperties: |
      sonar.cs.opencover.reportsPaths=$(Agent.BuildDirectory)/**/coverage.opencover.xml

- task: SonarCloudAnalyze@1

- task: SonarCloudPublish@1
  inputs:
    pollingTimeoutSec: '300'

# Install OWASP ZAP
- script: |
    sudo apt-get update
    sudo apt-get install zaproxy -y
  displayName: 'Install OWASP ZAP'

# Start OWASP ZAP in daemon mode
- script: |
    zap.sh -daemon -config api.disablekey=true -port 8080
  displayName: 'Start OWASP ZAP'

# Run OWASP ZAP scan
- script: |
    zap-cli quick-scan --self-contained --start-options '-config api.disablekey=true' http://your-app-url
    zap-cli report -o zap_report.html -f html
  displayName: 'Run OWASP ZAP Scan'

# Publish OWASP ZAP Report
- task: PublishPipelineArtifact@1
  inputs:
    targetPath: 'zap_report.html'
    artifact: 'ZAPReport'
    publishLocation: 'pipeline'
  displayName: 'Publish OWASP ZAP Report'
